@use 'variables' as v;


/* Flexbox classes */
.flex {
  display: flex;
}

.align-flex-start {
  align-items: flex-start;
}

.align-center {
  align-items: center;
}

.justify-end {
  justify-content: flex-end;
}
.space-between {
  justify-content: space-between;
}
.center {
  justify-content: center;
}

.h-flex {
  @extend .flex;
  flex-direction: row;
}
.v-flex {
  @extend .flex;
  flex-direction: column;
}
/* END: Flexbox classes*/


/* Layout */
.app-two-column-grid {
  margin: 33px 0;
  display: grid;
  width: 100%;
  grid-template-columns: 1fr 521px;
  gap: 35px;
  padding: 0 32px;
  max-width: v.$networksMaxWidth;
}

.as-card {
  border-radius: 11px;
  border: 1px solid v.$grey-light-1;

  &.with-padding {
    padding: v.$d-padding;
  }
}

.with-radius {
  border-radius: 11px;
}

.with-pointer {
  cursor: pointer;
}



.badge-node,.badge-edge{
  font-family: 'Roboto',sans-serif;
  font-weight: 500;
  font-size: .75rem;
  line-height: 11px;
  color: #fff;
  background: v.$green-light-1;
  padding: 3px 4px;
  border-radius: 2px;
}

.badge-edge{
  background: v.$yellow-color;
}



/* END:Layout */



/* Colors */
.mat-icon.green-color, .text-light-green{
  color: v.$green-light-1;
}

/* Functions */
@function toRem($value) {
  $remValue: ($value / 16) + rem;
  @return $remValue;
}


